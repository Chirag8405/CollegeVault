# Docker Compose for College Vault
# Developed by Chirag Poornamath

version: '3.8'

services:
  app:
    build:
      context: .
      target: runner
    container_name: college-document-vault
    ports:
      - "8080:8080"
    environment:
      - NODE_ENV=production
      - PORT=8080
      - SMTP_HOST=${SMTP_HOST:-smtp.gmail.com}
      - SMTP_PORT=${SMTP_PORT:-587}
      - SMTP_USER=${SMTP_USER}
      - SMTP_PASS=${SMTP_PASS}
      - TWILIO_ACCOUNT_SID=${TWILIO_ACCOUNT_SID}
      - TWILIO_AUTH_TOKEN=${TWILIO_AUTH_TOKEN}
      - TWILIO_PHONE_NUMBER=${TWILIO_PHONE_NUMBER}
      - JWT_SECRET=${JWT_SECRET}
      - LOG_LEVEL=${LOG_LEVEL:-info}
    volumes:
      - app_data:/app/data
      - app_logs:/app/logs
      - app_uploads:/app/uploads
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:8080/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    networks:
      - app_network
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.college-vault.rule=Host(`your-domain.com`)"
      - "traefik.http.routers.college-vault.tls=true"
      - "traefik.http.routers.college-vault.tls.certresolver=letsencrypt"

  # Optional: Backup service
  backup:
    image: alpine:latest
    container_name: college-vault-backup
    volumes:
      - app_data:/data:ro
      - ./backups:/backups
    command: >
      sh -c "
        while true; do
          echo 'Creating backup...'
          tar -czf /backups/backup-$(date +%Y%m%d-%H%M%S).tar.gz -C /data .
          find /backups -name '*.tar.gz' -mtime +7 -delete
          echo 'Backup completed. Next backup in 24 hours.'
          sleep 86400
        done
      "
    restart: unless-stopped
    networks:
      - app_network

  # Optional: Monitoring with Prometheus
  prometheus:
    image: prom/prometheus:latest
    container_name: college-vault-prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    restart: unless-stopped
    networks:
      - app_network

  # Optional: Grafana for visualization
  grafana:
    image: grafana/grafana:latest
    container_name: college-vault-grafana
    ports:
      - "3001:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD:-admin}
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/provisioning:/etc/grafana/provisioning
    restart: unless-stopped
    networks:
      - app_network

volumes:
  app_data:
    driver: local
  app_logs:
    driver: local
  app_uploads:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local

networks:
  app_network:
    driver: bridge
